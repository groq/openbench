name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  claude-review:
    # Only run on non-fork repositories to protect secrets
    if: github.event.pull_request.head.repo.fork == false
    
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions: write-all
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          claude_args: |
            --model claude-opus-4-1-20250805
            --max-turns 10
          
          additional_permissions: |
            actions: read
          
          prompt: |
            REPO: ${{ github.repository }}
            PR NUMBER: ${{ github.event.pull_request.number }}
            
            Review this PR like a chill staff engineer. Focus on NEW changes only and think DRY.

            ONLY bring up things if they're actually important - you don't need to comment on every category or find something to say. Quality over quantity.

            PRIORITY ORDER:
            - Critical bugs, security issues, performance problems  
            - Code quality: proper separation of concerns, clear naming, best practices
            - Missing tests for new functionality
            - Suggestions for cleaner patterns (only if they meaningfully improve the code)

            Be constructive and EXTREMELY concise. Think "would a 10x engineer actually care about this?" If it's not blocking or genuinely helpful, skip it entirely. Respect separation of concerns.

            Stay chill: flag real issues, suggest improvements where they add value, but don't nitpick or over-engineer. Sometimes the best review is a LGTM. ultrathink.
            
            Note: The PR branch is already checked out in the current working directory.
            
            Use `gh pr comment` for top-level feedback.
            Use `mcp__github_inline_comment__create_inline_comment` to highlight specific code issues.
            Only post GitHub comments - don't submit review text as messages.