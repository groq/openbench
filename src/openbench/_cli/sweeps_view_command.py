from __future__ import annotations

import http.server
import os
import socketserver
import sys
import threading
import webbrowser
from pathlib import Path
from typing import Optional

import typer
from rich.console import Console

console = Console()


class _NoCacheHandler(http.server.SimpleHTTPRequestHandler):
    """HTTP handler that serves a specific directory with no-cache headers."""

    def __init__(self, *args, directory: str | None = None, **kwargs):
        super().__init__(*args, directory=directory, **kwargs)

    def end_headers(self):
        # Ensure browser doesn't cache CSS/JS while iterating
        self.send_header("Cache-Control", "no-store, no-cache, must-revalidate, max-age=0")
        self.send_header("Pragma", "no-cache")
        self.send_header("Expires", "0")
        # Helpful when opening logs from other tabs
        self.send_header("Access-Control-Allow-Origin", "*")
        super().end_headers()

    # Quiet down the default logging a bit
    def log_message(self, fmt: str, *args):
        sys.stdout.write(f"[sweeps-view] {self.address_string()} - {fmt % args}\n")


def run_sweeps_view(
    dir: Optional[Path] = typer.Option(
        None,
        "--dir",
        help="Directory to serve (defaults to ./logs/sweeps)",
        envvar=None,
    ),
    host: str = typer.Option(
        "127.0.0.1",
        "--host",
        help="TCP/IP host for server",
    ),
    port: int = typer.Option(
        8765,
        "--port",
        help="TCP/IP port for server",
    ),
    open_browser: bool = typer.Option(
        True,
        "--open/--no-open",
        help="Open the browser automatically",
    ),
) -> None:
    """
    Serve the redesigned static sweeps site (generated by `bench sweep`) with a tiny HTTP server.
    """
    serve_dir = (dir or Path("./logs/sweeps")).resolve()
    if not serve_dir.exists():
        console.print(f"\n[red]No sweeps directory found:[/red] {serve_dir}")
        console.print("Run a sweep first:  [bold]bench sweep sweeps/your_config.yaml[/bold]\n")
        raise typer.Exit(code=1)

    # Prefer index.html in the root; fall back to listing
    index = serve_dir / "index.html"
    if not index.exists():
        console.print(f"[yellow]Heads up:[/yellow] {index} not found. You'll see a directory listing.\n")

    Handler = lambda *a, **kw: _NoCacheHandler(*a, directory=str(serve_dir), **kw)  # noqa: E731

    with socketserver.ThreadingTCPServer((host, port), Handler) as httpd:
        httpd.daemon_threads = True

        url = f"http://{host}:{port}/"
        console.print(f"\n[bold green]Serving sweeps site[/bold green] from: {serve_dir}")
        console.print(f"URL: [bold]{url}[/bold]\n")

        if open_browser:
            # Open the root index once the server is ready
            threading.Thread(target=lambda: (webbrowser.open(url)), daemon=True).start()

        try:
            httpd.serve_forever()
        except KeyboardInterrupt:
            console.print("\n[dim]Shutting downâ€¦[/dim]")
            httpd.shutdown()


# Backwards-compatible alias to avoid import errors if older code expects `sweeps_view`
def sweeps_view(
    dir: Optional[Path] = None,
    host: str = "127.0.0.1",
    port: int = 8765,
    open_browser: bool = True,
) -> None:
    return run_sweeps_view(
        dir=dir,
        host=host,
        port=port,
        open_browser=open_browser,
    )