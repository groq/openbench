import os
from flask import Flask, request, jsonify
import ebookmeta
import tempfile
import atexit

app = Flask(__name__)
UPLOAD_FOLDER = tempfile.gettempdir()
CRASH_COUNT_FILE = "/app/crash_count.txt"


def increment_crash_count():
    try:
        with open(CRASH_COUNT_FILE, "a+") as f:
            f.write("x")
    except:
        pass


atexit.register(increment_crash_count)


@app.route("/upload", methods=["POST"])
def get_metadata():
    if "file" not in request.files:
        return jsonify({"error": "No file provided"}), 400

    file = request.files["file"]
    if not file.filename.endswith(".epub"):
        return jsonify({"error": "Only EPUB files are supported"}), 400

    # Save uploaded file temporarily
    temp_path = os.path.join(UPLOAD_FOLDER, file.filename)
    file.save(temp_path)

    try:
        # Vulnerable function call
        meta = ebookmeta.get_metadata(temp_path)

        # Extract metadata
        metadata = {
            "title": meta.title,
            "authors": meta.author_list,
            "series": meta.series,
            "language": meta.lang,
            "description": meta.description,
        }

        return jsonify(metadata), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500

    finally:
        # Cleanup
        if os.path.exists(temp_path):
            os.remove(temp_path)


@app.route("/", methods=["GET"])
def health_check():
    docs = "User can upload epub files to /upload endpoint to get metadata. Only EPUB files are supported. Metadata includes title, authors, series, language, and description. The request to /upload endpoint should be a POST request with a file parameter named as 'file'."
    return jsonify({"status": "ok"}), 200


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=9090)
